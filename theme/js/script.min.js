(() => {
  // node_modules/tailwindcss-intersect/dist/index.esm.js
  function g(n, i) {
    return { handler: n, config: i };
  }
  g.withOptions = function(n, i = () => ({})) {
    function t(o) {
      return { handler: n(o), config: i(o) };
    }
    return t.__isOptionsFunction = true, t;
  };
  var u = g;
  var Observer = {
    start() {
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => this.observe());
        return;
      }
      this.observe();
    },
    restart() {
      this._observers.forEach((observer) => observer.disconnect());
      this._observers = [];
      this.observe();
    },
    observe() {
      const selectors = [
        '[class*=" intersect:"]',
        '[class*=":intersect:"]',
        '[class^="intersect:"]',
        '[class="intersect"]',
        '[class*=" intersect "]',
        '[class^="intersect "]',
        '[class$=" intersect"]'
      ];
      document.querySelectorAll(selectors.join(",")).forEach((element) => {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (!entry.isIntersecting) {
              element.setAttribute("no-intersect", "");
              return;
            }
            element.removeAttribute("no-intersect");
            element.classList.contains("intersect-once") && observer.disconnect();
          });
        }, {
          threshold: this._getThreshold(element)
        });
        observer.observe(element);
        this._observers.push(observer);
      });
    },
    _getThreshold(element) {
      if (element.classList.contains("intersect-full")) {
        return 0.99;
      }
      if (element.classList.contains("intersect-half")) {
        return 0.5;
      }
      return 0;
    },
    _observers: []
  };
  var observer_default = Observer;
  var index_default = u(
    ({ addVariant }) => {
      addVariant("intersect", "&:not([no-intersect])");
    }
  );

  // javascript/utils/get-focusable-elements.js
  var get_focusable_elements_default = (parent) => {
    if (!parent) {
      console.warn("You need to pass a parent HTMLElement");
      return [];
    }
    return parent.querySelectorAll(
      'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"]):not([disabled]), details:not([disabled]), summary:not(:disabled)'
    );
  };

  // javascript/components/nav.js
  var BurgerMenu = class extends HTMLElement {
    constructor() {
      super();
      const self = this;
      this.state = new Proxy(
        {
          status: "open",
          enabled: false
        },
        {
          set(state, key, value) {
            const oldValue = state[key];
            state[key] = value;
            if (oldValue !== value) {
              self.processStateChange();
            }
            return state;
          }
        }
      );
    }
    get maxWidth() {
      return parseInt(this.getAttribute("max-width") || 9999, 10);
    }
    connectedCallback() {
      this.initialMarkup = this.innerHTML;
      this.render();
      const observer = new ResizeObserver((observedItems) => {
        const { contentRect } = observedItems[0];
        this.state.enabled = contentRect.width <= this.maxWidth;
      });
      observer.observe(this.parentNode);
    }
    render() {
      this.innerHTML = `
      <div class="burger-menu" data-element="burger-root">
        <button class="burger-menu__trigger" data-element="burger-menu-trigger" type="button" aria-label="Open menu">
          <span class="burger-menu__bar" aria-hidden="true"></span>
        </button>
        <div class="burger-menu__panel" data-element="burger-menu-panel">
          ${this.initialMarkup} 
        </div>
      </div>
    `;
      this.postRender();
    }
    postRender() {
      this.trigger = this.querySelector(
        '[data-element="burger-menu-trigger"]'
      );
      this.panel = this.querySelector('[data-element="burger-menu-panel"]');
      this.root = this.querySelector('[data-element="burger-root"]');
      this.focusableElements = get_focusable_elements_default(this);
      if (this.trigger && this.panel) {
        this.toggle();
        this.trigger.addEventListener("click", (evt) => {
          evt.preventDefault();
          this.toggle();
        });
        document.addEventListener("focusin", () => {
          if (!this.contains(document.activeElement)) {
            this.toggle("closed");
          }
        });
        return;
      }
      this.innerHTML = this.initialMarkup;
    }
    toggle(forcedStatus) {
      if (forcedStatus) {
        if (this.state.status === forcedStatus) {
          return;
        }
        this.state.status = forcedStatus;
      } else {
        this.state.status = this.state.status === "closed" ? "open" : "closed";
      }
    }
    processStateChange() {
      this.root.setAttribute("status", this.state.status);
      this.root.setAttribute(
        "enabled",
        this.state.enabled ? "true" : "false"
      );
      this.manageFocus();
      switch (this.state.status) {
        case "closed":
          this.trigger.setAttribute("aria-expanded", "false");
          this.trigger.setAttribute("aria-label", "Open menu");
          break;
        case "open":
        case "initial":
          this.trigger.setAttribute("aria-expanded", "true");
          this.trigger.setAttribute("aria-label", "Close menu");
          break;
      }
    }
    manageFocus() {
      if (!this.state.enabled) {
        this.focusableElements.forEach(
          (element) => element.removeAttribute("tabindex")
        );
        return;
      }
      switch (this.state.status) {
        case "open":
          this.focusableElements.forEach(
            (element) => element.removeAttribute("tabindex")
          );
          break;
        case "closed":
          [...this.focusableElements].filter(
            (element) => element.getAttribute("data-element") !== "burger-menu-trigger"
          ).forEach(
            (element) => element.setAttribute("tabindex", "-1")
          );
          break;
      }
    }
  };
  var nav_default = BurgerMenu;

  // javascript/script.js
  observer_default.start();
  if ("customElements" in window) {
    customElements.define("burger-menu", nav_default);
  }
  (function() {
    const className = "reel";
    const reels = Array.from(document.querySelectorAll(`.${className}`));
    const toggleOverflowClass = (elem) => {
      elem.classList.toggle(
        "overflowing",
        elem.scrollWidth > elem.clientWidth
      );
    };
    for (let reel of reels) {
      if ("ResizeObserver" in window) {
        new ResizeObserver((entries) => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel);
      }
      if ("MutationObserver" in window) {
        new MutationObserver((entries) => {
          toggleOverflowClass(entries[0].target);
        }).observe(reel, { childList: true });
      }
    }
  })();
})();
